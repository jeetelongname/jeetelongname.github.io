<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>haskell on Jeet&#39;s Blog</title>
    <link>https://www.jeetelongname.net/blog/tags/haskell/</link>
    <description>Recent content in haskell on Jeet&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>&amp;copy 2022 Jeetaditya Chatterjee</copyright>
    <lastBuildDate>Mon, 10 Apr 2023 02:43:00 +0100</lastBuildDate><atom:link href="https://www.jeetelongname.net/blog/tags/haskell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Reader Applicative and abstraction</title>
      <link>https://www.jeetelongname.net/blog/posts/the-reader-monad-and-abstraction/</link>
      <pubDate>Mon, 10 Apr 2023 02:43:00 +0100</pubDate>
      
      <guid>https://www.jeetelongname.net/blog/posts/the-reader-monad-and-abstraction/</guid>
      <description>Now this is not a haskell blog site but this is the second interesting thing haskell has offered me.
Today we are discussing the curious nature of the Reader monad (well the Reader applicative functor as I don&amp;rsquo;t plan on delving into the monad aspects a terrible amount)
To do this we will be discussing this pairs function.
pairs :: [a] -&amp;gt; [(a, a)] pairs = zip &amp;lt;*&amp;gt; tail On the surface its all weird and magical, but we will walk through the types and the implementations so that we can maybe pick up an intuition on how this works in general.</description>
    </item>
    
    <item>
      <title>I finally understand monads and now I will write about it</title>
      <link>https://www.jeetelongname.net/blog/posts/understanding-monads/</link>
      <pubDate>Wed, 23 Nov 2022 05:53:00 +0000</pubDate>
      
      <guid>https://www.jeetelongname.net/blog/posts/understanding-monads/</guid>
      <description>After a lot of struggle I finally understand monads and why they are useful. This is less an explainer and more of a write up of my understanding. In any case let us get started.
So what is a monad? A monad is a datatype that can use &amp;gt;&amp;gt;=, You can call it bind or then with the latter name leading into what it does. Here is its type.
(&amp;gt;&amp;gt;=) :: m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b This function takes in a context of m a, then a function which transforms that inner value, returning that transformed value in the same context.</description>
    </item>
    
  </channel>
</rss>
