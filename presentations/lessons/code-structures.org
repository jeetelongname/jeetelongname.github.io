#+TITLE: Code Structures
#+OPTIONS: toc:nil reveal_width:1200 reveal_height:1080 num:nil
#+REVEAL_ROOT: ../reveal.js
#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h3>%s</h3><h2>By %A %a</h2><h3><i>The basic building blocks</i></h3><p>Press s for speaker notes</p>
#+REVEAL_THEME: black
#+REVEAL_TRANS: slide

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage[top=1cm,left=3cm,right=3cm]{geometry}


* Basic overview of pseudocode
#+begin_notes
psudocode is not a language but representation of code that does not have to use
any standard syntax.

its a way of planning out code without having to worry about syntax or language
specific details.

Its good practice to write out some psudsocode before going into the actual
implementation of a program
#+end_notes

#+begin_src
name <- input "what is your name?"
hello <- "Hi "
print hello + name
#+end_src
* talk about notation
#+begin_notes
now while syntax is not important. the main exam boards have a sense of syntax
for the sake of making sure the question is readable. the notation is provided
and is usually common sense.

Do note that when you need to write pseudocode you don't need to use the
notation but it makes sense to do so to make sure the marker does not confuse
the code meaning (but as long as your answer makes logical sense it will be
marked.)

https://filestore.aqa.org.uk/resources/computing/AQA-8525-NG-PC.PDF
#+end_notes
* Variables
#+begin_notes
Vaiables are a way to store values that can then be accessed later using the
name given to them. They can be
passed around like any other value and can be changed as the program is run
(meaning they are /variable/)
#+end_notes

#+begin_src python :results output
x = 10
print(x)

x = 20
print(x)
#+end_src

: 10
: 20
* Input and output
** Input
to take input from the user you use the ~input~ function
#+begin_src python
x = input("some prompt: ")
#+end_src

** Output
we use the ~print~ function to output
#+begin_src python
print("some cool string")
#+end_src

* Selection and Iteration
#+begin_notes
flow control is a way to control which statements do and don't run
#+end_notes
** If statements
#+begin_notes
if statements allow you to run a certain set of code if a boolean expression
returns true. otherwise it will move on (if an else case is not provided) or it
will run the else case.
#+end_notes

#+begin_src ruby
something = "a string"
if something == "a string" then
  "something is a string"
elsif something == "a number" then
  "something is a number"
else
  "something is not a string"
end
#+end_src

: something is a string

#+begin_notes
You can also add an else if clause that checks against a different boolean
expression
#+end_notes

#+begin_src ruby
something = false
if something == true
  "soemthing is true"
elsif something == nil
  "soemthing is nil"
else
  "something is false"
end
#+end_src

: something is false

** Switch statements
#+begin_notes
switch statements are like big if else blocks but they check a variable is equal
to a certain condition.

you can also add an else clause
#+end_notes

#+begin_src fortran
something = 3
switch something:
    case 1:
  "something = 1"
    case 2:
  "something = 2"
    case 3:
  "something = 3"
end switch
#+end_src

: something = 3

** Conditional loops
#+begin_notes
there are 2 kinds of conditional loops a while loop and a do while loop.
they both only exit if a condition is met but the do while loop will check the
condition at the end of execution while the regular while loop checks at the
beginning. this may seem like a small difference but means the do while loop will
run the body at least once

in this example count is never incremented as condtion is already true.
#+end_notes

#+begin_src c
condition = true;
count = 0;

while condition != true {  // this loop will never run
  if (count != 10) {
    count += 1;
  } else
    condition = true;
}

print("count =", count)
#+end_src

: count = 0

#+begin_src c
do {
  if (count != 10) {
    count += 1;
  } else
    condition = true;
} while condition != true;

print("count =", count)
#+end_src

: count = 1

#+reveal: split
#+begin_src python
count = 0
while count != 0:
    count += 1  # count = count + 1

while True:
    count += 1
    if count != 0:
        break
#+end_src
** for loops
#+begin_notes
A for loop is a defined loop. It will run for a set amount of iterations before
exiting.

note there are 2 variations. that can be used. a definite one that iterates for
a set number of iterations and an array loop which itterates through every
element of an array
#+end_notes

#+begin_src python :results output
lst = [1, 2, 3]
for i in range(3):
  print(lst[i])

for i in lst:
  print(i)
#+end_src

: 1
: 2
: 3

: 1
: 2
: 3

* A side note on the difference between expressions and statements
#+begin_notes
an expression in simple terms is a set of code that returns a value. you can
think of this intuitively by thinking of if you can store the output in a variable

some examples of expressions include (but are not limited too)
- use of mathematical operators (plus/minus/multiply and divide) they return a
  number
- comparison operators (==, !=, <, >) and so on. they will return true or false
- functions that will return a value

there are some other examples (that start to dive into language theory and such) but for the most part these are the ones you will
be covering.
#+end_notes

#+begin_src python
import math

x = 1 + 1
y = 2 > 1
z = math.sqrt(4)

return [x, y, z]
#+end_src

| 2 | True | 2.0 |

* procedures and functions
#+begin_notes
procedures and functions are two types of sub programs.

a function returns a value while a procedure does not a is more like copy and
paste (talk a little about side effects)

They are a way to call a set of
code multiple times with different arguments each time. essentially creating an
abstraction and meaning you do not repeat code (which is a bad practice all
around)
#+end_notes

#+begin_src python
def in_array(array, to_find):
  for i in array:
    if i == to_find:
      return True
  return False
lst = [1,2,3]
x = in_array(lst, 3)
y = in_array(lst, 4)

[x, y]
#+end_src

| true | false |
* Other misc stuff
** Casting
#+begin_src python
# its just a function
x = str(7)
y = int("7")
#+end_src

** String handling
#+begin_src ruby
string = "string"
string.length

startPos = 1
numberOfChars = 3
string.subString(startPos, numberOfChars)

#+end_src

| 6 | "tri" |

* types of questions
#+begin_notes
there will be 2 kinds of questions. write psudeo code and read psudo code.


SUBROUTINE linearSearch(list, toFind)
    FOR i <- 0 TO LEN(list)
        IF list[i] == toFind
            RETURN true
        ENDIF
    ENDFOR
    RETURN false
ENDSUBROUTINE

list <- [2, 3 , 5 , 6]
toFind <- 5
linearSearch(list, toFind)
#+end_notes

#+begin_src
Write an implementation of the linear search algorithm using psuedocode
#+end_src
* Questions
#+begin_notes
Most of the questions will ask you to read psudo code or like some of these
identify code constructs. It will also ask you to write some of your own
psudocode so keep that in mind
#+end_notes
** Tell me the code structures
*** What loop should you use when you need to loop through an array?
*** What structure decides which path to take depending on a boolean expression?
*** What structure should you use when you need to check a variable against multiple expressions
** Question 1
[[file:code-structures1.png]]
** Question 2
[[file:code-structures2.png]]
** Question 3
[[file:code-structures3.png]]
** Question 4
[[file:pseudocode1.png]]
