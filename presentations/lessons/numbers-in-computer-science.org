#+TITLE: Numbers In Computer Science

#+OPTIONS: toc:nil reveal_width:1200 reveal_height:1080 num:nil
#+REVEAL_ROOT: ../reveal.js
#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h3>%s</h3><h2>By %A %a</h2><h3><i>units, converting back and forth and some maths</i></h3><p>Press s for speaker notes</p>
#+REVEAL_THEME: black
#+REVEAL_TRANS: slide

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage[top=1cm,left=3cm,right=3cm]{geometry}

* The Units
#+begin_notes
There are some units you need to know
- bit
- nibble (4 bits)
- byte (8 bits, 2 nibbles)
- kilobyte (1000 *bytes*)
- megabyte (1000 *kilobytes*)
- gigabyte
- terabyte
- petabyte
#+end_notes

#+ATTR_REVEAL: frag(roll-in)
- bit
- nibble (4 bits)
- byte (8 bits, 2 nibbles)
- kilobyte (1000 *bytes*)
- megabyte (1000 *kilobytes*)
- gigabyte
- terabyte
- petabyte
* Why we use what we use
** Binary
#+begin_notes
Computers use binary (other words base 2) as it uses electrical signals for its computation.
a 0 is an off state while a 1 is an on state.
#+end_notes
** Hexadecimal
#+begin_notes
we use hexadecimal as one digit of hex can represent one nibble or half a byte.
this means that the 8 characters used by a single byte can be reduced to two
characters. this makes it much more compact making it a convenient short hand
#+end_notes
* Converting between
** the basics ob binary
#+begin_notes
lets start by what a binary digit is.
the placement of a diget corresponds to a power of 2
this is like base 10.
#+end_notes
|     |     |     | ... | 10^3 | 10^2 | 10^1 | 10^0 |
|     |     |     |     | 1000 |  100 |   10 |    1 |
|-----+-----+-----+-----+------+------+------+------|
| 2^7 | 2^6 | 2^5 | 2^4 |  2^3 |  2^2 |  2^1 |  2^0 |
|-----+-----+-----+-----+------+------+------+------|
| 128 |  64 |  32 |  16 |    8 |    4 |    2 |    1 |
|     |     |     |     |      |      |      |      |
*** Denary to Binary
#+begin_notes
to convert from deneray to binary we use a simple table
where the first row is the powers of two.

we take the number and work left to right taking away every number that fits
so in this case 128, 64, 32 and 16 don't fit so they get represented with zero's
8 does fit so we take it away.
a one is put in the 8 column
4 does not fit into our new total but 2 does so we put a 1 in the two column
we contine until our total is zero
#+end_notes
we want to convert 10
- 10 - 8 = 2
- 2 - 2 = 0
| 128 | 64 | 32 | 16 | 8 | 4 | 2 | 1 |
|   0 |  0 |  0 |  0 | 1 | 0 | 1 | 0 |

: 00001010
*** Binary to Denary
#+begin_notes
for the reverse we again put our binary number into the table add up all of the
powers of 2 which have a one in there column
#+end_notes

| 128 | 64 | 32 | 16 | 8 | 4 | 2 | 1 |
|   0 |  0 |  0 |  0 | 1 | 0 | 1 | 0 |

8 + 2 = 10

** The basics of Hexadecimal
#+begin_notes
Hexadecimal is base 16 we can use the same techniqe as before but its easier to
just use this trick (both are valid in the exam except one is much faster)

we also need to talk about symbols
as hex is base 16 we need some more symbols to represent all the digits
so if we wanted to represent 16 it would actually be 10.
*count up in hex*
#+end_notes
- A = 10
- B = 11
- C = 12
- D = 13
- E = 14
- F = 15
** Binary to Hex
#+begin_notes
for this example we need to first split the byte in half.
lets take another example 26
00011010
#+end_notes
- we have the binary number 26
  00011010
- so that we have 2 /nibbles/
  0001  1010

- we then convert them to denary (usually in our heads.) and convert it to hex
- digits
- 1   10
- 1   A

our hex digit is 1A
** Hex to Binary
#+begin_notes
 to do the reverse we just reverse the process
  note I don't discuss converting from denary to Hex as I would recommend you
  convert to binary before converting to Hex.
  You need to be careful as it may seem there is a shortcut but it can be
  deceptive
#+end_notes
we want to convert 1A

- split it
  1  A
- convert to denary
  1  10
- convert the denary to binary
  0001  1010
- put them together
  00011010
* Maths using binary
** Addition
#+begin_notes
You need to be able to add 2 binary numbers together.
*use whiteboard*
#+end_notes

*** Overflow errors
#+begin_notes
as there are only 8 bits when we add 2 numbers that will lead to a number bigger
than one that can be represented as an overflow
#+end_notes
** Binary shifts
#+begin_notes
a binary shift *shifts* all the bits left and right by a certain amount.
it essentually performs a multiplication and division in multiples of 2

we have an analogy in base 10. its called multiplication and division by 10
#+end_notes
* Questions
** Convert 137 to binary
#+begin_notes
A: 1000 1001
#+end_notes
** Convert 95 to hex
#+begin_notes
A: 5F
#+end_notes
** what does 1000100 + 10010001
#+begin_notes
A: 11010101
#+end_notes
- what kind of error does it raise?
** Binary shift 00111000 once to the left.
#+begin_notes
01110000
56
112
#+end_notes
- what is the number before and after?
** Exam questions
[[file:numbers1.png]]
