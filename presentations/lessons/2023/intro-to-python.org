#+title: Intro To Python

#+OPTIONS: toc:nil reveal_width:1200 reveal_height:1080 num:nil
#+REVEAL_ROOT: ../../reveal.js
#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h3>%s</h3><h2>By %A %a</h2><h3><i>SSSSSS</i></h3><p>Press s for speaker notes</p>
#+REVEAL_THEME: black
#+REVEAL_TRANS: slide

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage[top=1cm,left=3cm,right=3cm]{geometry}

* What is python
#+begin_notes
Python is a dynamic general purpose programming language.
Its used for many things including learning!
#+end_notes
* Programming with python.
#+begin_notes
you can go to python.org and install all the tools but an easier and nicer way
is to use replit.com. its pretty simple.

When you sign up, you can create a new python project, for the moment thats all
we need
#+end_notes
#+attr_reveal: :frag (roll-in)
- https://python.org
- https://replit.com
* The first program
#+begin_notes
The first program everyone begins with is
#+end_notes
#+begin_src python  :results output
print("hello world")
#+end_src

#+RESULTS:
: hello world

** Now lets break down what we did
#+begin_notes
it may seem silly but it makes sense to do so

There are two main parts.
#+end_notes
#+attr_reveal: :frag (roll-in)
- ~print~
= ="hello world"=
* Giving names to things
#+begin_notes
In python we can produce variables. we do this by using = operator
#+end_notes

#+begin_src python :results output
a = 1

print(a)
#+end_src

#+RESULTS:
: 1
* Maths
#+begin_notes
Some basic maths operatiosn are as such
#+end_notes

#+begin_src python  :results output
a = 1 + 2
b = 1 - 2
c = 1 / 2
d = 1 * 2

print(a, b, c, d)
#+end_src

#+RESULTS:
: 3 -1 0.5 2
* A reminder
* Expressions
#+begin_notes
Before we move on let us discuss what an expression is,
What do people know about expressions?

They are bits of code that resolve to a value. In other words it any code you
can assign a name too

This is different from statements which tell the code what too do. We will
encounter some. but an example would be the varible assignment. Thats not
resolving to a value but telling python what to do (in this case assigning a
name to a value)

so for example

These are valid in any place that can take in a variable. In a sense variables
are also expressions.
#+end_notes

#+attr_reveal: :frag (roll-in)
- ~1 + 1 => 2~
- ~1 != 2 => True~
- ~True is True => True~
- ~math.sqrt(4) => 2~
** Boolean expression
#+begin_notes
Boolean expressions are expressions that return true or false. You have probably
used them before. there are a few you need to know
#+end_notes
#+attr_reveal: :frag (roll-in)
- ~==~
- ~!=~
- ~< and >=~
- ~> and <=~
- ~is~
- ~in~

* If statements
#+begin_notes
Now we are getting into flow control
#+end_notes
* Types
#+begin_notes
Types are what a variable is, it allows us to define operations on entire
classes of values, for example numbers can use the + operator and functions from
the ~math~ library. Strings have there own operations, other data types such as
dates or even your own types (which we will have an entire lesson on!)

The types you need to know of are...

You can convert between these types if there is something to convert.
#+end_notes
#+attr_reveal: :frag (roll-in)
- Characters
- Strings
- Ints
- Floats
- Booleans
- Lists
* Lists
#+begin_notes
Lists are what are known as a composite data type. You cannot /just/ have a
list. you must have a list of /something/ (unless the list is empty).
for example you can have a list of any type.

In python we can mix and match types as well. Though in your spec it may say
that they can only have one type (and in many languages which check your types
more strongly, you will get an error.)
#+end_notes
#+attr_reveal: :frag (roll-in)
- [1, 2, 3]
- ['a', 'b', 'c']
- [True, False, True]
- [1, 'a', False]

* Loops
#+begin_notes
Its all well and good to have a collection of values, but what if we want to use
this collection? maybe print it out?.
or more generally, how do we write code that will be run many times?

This is where loops come in. Loops are a statement that allows us to run code
many times, either a definite amount of times (for ten iterations as an example) or while a
value remains true.
#+end_notes
** For loops
#+begin_notes
There are 2 kinds of for loop you need to know about. The count controled loop
and the collection loop
#+end_notes
*** Count Controlled
#+begin_notes
Lets say we want to iterate 10 times we can use the range construct.
This gives us a range we can move over.
#+end_notes
#+begin_src python :results output
for i in range(10):
    print(i)
#+end_src

#+RESULTS:
#+begin_example
0
1
2
3
4
5
6
7
8
9
#+end_example
*** Adding in some more details
#+begin_notes
We can also add in an optional start value and a step, like so
#+end_notes
#+begin_src python :results output
for i in range(start := 2, stop := 12, step := 2):
    print(i)
#+end_src

#+RESULTS:
: 2
: 4
: 6
: 8
: 10

** While loops
#+begin_notes
While loops are simpler, they just need a boolean expression
These loops can run for an indefinite amount of time, because the boolean
expression may never become false
#+end_notes
#+begin_src python :results output
a = 0
while a != 10:
    print(a)
    a += 1
#+end_src

#+reveal_split:
#+begin_src python
a = 0
while a != 10:
    print(a)
# NOTE: I am not changing a
#+end_src

* Strings
#+begin_notes
Strings are a list of characters. They can act like lists but have a few of
there own operations. these include
#+end_notes
#+attr_reveal: :frag (roll-in)
- STRING.lower()
- String.upper()
- String.substring() (this one has a different syntax)
- ord (convert character to ascii number)
- chr (convert ascii number to character)
* Functions
#+begin_notes
Functions allow us to encapsulate and abstract away code. this allows us to
reuse code and abstract away implementation details.
 Here is a small example
#+end_notes

#+reveal: split
#+begin_src python :results output
def add(x, y):
    return x + y

print(add(2, 3))
#+end_src

#+RESULTS:
: 5

* Files
#+begin_notes
We have learned how to interact with values within python but what about values
outside python? Things such as files or getting input from the user?
When working with files we need to be able to
read from them
write to them

There is also a special case of writing where we will want to append to a file.


#+end_notes

#+attr_reveal: :frag (roll-in)
- read from them
- Write to them
- Append to them

** Reading files
#+begin_src python :results output
file = open("fileName.txt", "r")
file.read() # return one string of the entire file
file.seek(0) # go back to the start

# iterate through the file line by line
for line in file:
    print("line", line)
file.seek(0)

# get a list of lines to process
lines = file.readlines()

file.close() #remember to close the file after

# we cannot read from it after, we will get an error
#+end_src

: line 1
:
: line 2
:
: line 3
:

** Writing to files
#+begin_src python :results output
print("before write")
readable = open("fileName.txt", "r")
print(readable.read())
readable.close()

writable = open("fileName.txt", "w")
writable.write("4")
writable.close()

print("after write")
readable = open("fileName.txt", "r")
print(readable.read())
readable.close()
#+end_src

: before write
: 1
: 2
: 3
:
: after write
: 4

: before write
: 1
: 2
: 3
:
: before after write
: 4

** Appending to files
#+begin_src python :results output
print("before write")
readable = open("fileName.txt", "r")
print(readable.read())
readable.close()

appendable = open("fileName.txt", "a")
appendable.write("4\n")
appendable.close()

print("after write")
readable = open("fileName.txt", "r")
print(readable.read())
readable.close()
#+end_src

#+begin_example
before write
1
2
3

before after write
1
2
3
4
#+end_example

** The with statement
#+begin_src python :results output
with open("fileName.txt", "r") as file:
    print(file.read())
#+end_src

: 1
: 2
: 3
:

* Classes
#+begin_notes
We have disucssed a lot of things, If you cast your mind back we discussed
types, Those types have operations to them whether its add for numbers or the
.upper() operation for strings

Let us discuss a thought experiment.
Lets say we want to model a bin. The Bin has a few features. It tells us how
full it is. what it can store.

#+end_notes
#+attr_reveal: :frag (roll-in)
What do we need to model this bin?
** Well we need to be able to create a bin.
#+begin_notes
make a bin
add trash to the bin
empty the bin
#+end_notes
so lets make a =make_bin= function!
#+reveal: split
#+begin_src python
def make_bin(type_of_bin):
    return [0, type_of_bin]
#+end_src
#+reveal: split
#+begin_src python
def add_rubbish(bin, rubish_type):
    if bin[1] == rubish_type:
        bin[0] += 1
    else:
        print("Use a different bin!")
    return bin
#+end_src

#+reveal: split
#+begin_src python
def empty_bin(bin):
    bin[0] = 0
    return bin
#+end_src

#+reveal: split
now lets use this!
#+begin_src python
bin = make_bin("glass")
bin = add_rubbish(bin, "glass")
bin = add_rubbish(bin, "plastic")
bin = empty_bin(bin)
#+end_src

#+begin_notes
Whats the problem with this?

We have to manually pass in the bin and capture it again.
None of these functions are connected.
If we pass in a thing that looks like a bin it will still work which is a
problem because it may break our system.

What we want is a new /type/ that encapsulates this nice and cleanly
- this may be a problem
#+end_notes
*** A class for our bin
#+begin_notes
to create a new type we need to use the class keyword.
#+end_notes
#+begin_src python
class Name:
    # ur stuff goes here...
    pass
#+end_src
#+reveal: split
#+begin_src python
# this is similar to our make bin function
class Bin:
   def __init__(self, bin_type):
       self.ammount = 0
       self.bin_type = bin_type
#+end_src

#+begin_src python
class Bin:
   def __init__(self, bin_type):
       self.ammount = 0
       self.bin_type = bin_type

   def add_rubbish(self, rubbish_type):
       if self.bin_type == rubbish_type:
          self.ammount += 1
       else:
          print("Use a different bin!")

   def empty_bin(self):
      self.ammount = 0

#+end_src

Using this now we can
* Project!
#+begin_notes
We are going to do a story, The basic idea is that we will parse a file with the
story lines, then ask the user yes and no questions, from these questions we may
do something like pick out a new story line, do some work.
we should end up covering these skills
/switch to replit/
#+end_notes
#+attr_reveal: :frag (roll-in)
    - File handling
    - Functions for abstraction
    - taking input, printing output
    - Classes for our own datatype
    - String handling
    - loops
