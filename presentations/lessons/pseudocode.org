#+TITLE: Pseudocode
#+OPTIONS: toc:nil reveal_width:1200 reveal_height:1080 num:nil
#+REVEAL_ROOT: ../reveal.js
#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h3>%s</h3><p>Press s for speaker notes</p>
#+REVEAL_THEME: black
#+REVEAL_TRANS: slide

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage[top=1cm,left=3cm,right=3cm]{geometry}

* Basic overview of pseudocode
#+begin_notes
psudocode is not a language but represntation of code that does not have to use
any standard syntax.

its a way of planning out code without having to worry about syntax or language
specific details.

Its good practice to write out some psudsocode before going into the actual
implementation of a program
#+end_notes

#+begin_src
name <- input "what is your name?"
hello <- "Hi "
print hello + name
#+end_src
* talk about notation
#+begin_notes
now while syntax is not important. the main exam boards have a sense of syntax
for the sake of making sure the question is readable. the notation is provided
and is usually common sense.

Do note that when you need to write pseudocode you don't need to use the
notation but it makes sense to do so to make sure the marker does not confuse
the code meaning (but as long as your answer makes logical sense it will be
marked.)

https://filestore.aqa.org.uk/resources/computing/AQA-8525-NG-PC.PDF
#+end_notes
* jump into questions
#+begin_notes
there will be 2 kinds of questions. write psudeo code and read psudo code.


SUBROUTINE linearSearch(list, toFind)
    FOR i <- 0 TO LEN(list)
        IF list[i] == toFind
            RETURN true
        ENDIF
    ENDFOR
    RETURN false
ENDSUBROUTINE

list <- [2, 3 , 5 , 6]
toFind <- 5
linearSearch(list, toFind)
#+end_notes

#+begin_src
Write an implementation of the linear search algorithm using psuedocode
#+end_src
* simple example
   [[file:pseudocode1.png]]
* harder
* practice
