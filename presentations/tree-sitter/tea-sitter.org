#+TITLE: Tea Sitter
#+OPTIONS: toc:nil reveal_width:1200 reveal_height:1080 num:nil
#+REVEAL_ROOT: ../reveal.js
#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h3>%s</h3><h2>By %A %a</h2><h3><i>I am still salty that the vc module stole my joke</i></h3><p>Press s for speaker notes</p>
#+REVEAL_THEME: black
#+REVEAL_TRANS: slide

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage[top=1cm,left=3cm,right=3cm]{geometry}

* What is Tree Sitter?
#+begin_notes
Tree sitter is a parser generator and incremental parsing library that allows
programs to become syntax aware of the programs they are editing.
#+end_notes
* ... What does that mean?
#+begin_notes
Great question lets break that down
#+end_notes
** Parser Generation
#+begin_notes
- Provide some example

essentially a parser generator takes in a context free representation of some
code and then generates some object that can then be used for parsing.

In tree sitters case these grammer are a javascript object *explain*
that is then compiled by the tree-sitter cli tool into a c shared library which can then be
dynamically loaded by libtree-sitter
#+end_notes

#+begin_src js
module.exports = grammar({
  name: 'hello example',

  rules: {
    // TODO: add the actual grammar rules
    source_file: $ => $.hello,
    hello: $ => "hello rigor"
  }
});
#+end_src
** Incremental Parsing
#+begin_notes
With the parser generated we can now do some cool shit.
I will not be going into a lot of detail how but in essence it starts off by
parsing the tree, it uses a generalised form of LR parsing (which allows it to
deal with ambiguty as well as its robust error handling).

after the first parse it does not need to reparse the tree, instead it will walk
the tree and only change the nodes affected. its pretty cool like that (and also
makes it really bloddy fast)
#+end_notes
* Ok that's really cool! why should I care?
#+begin_notes
well there are many reasons!
- Well now we have an ast to play with

  this allows us to play with our code structurally and manipulate in terms of
  functions, statements and expressions which is something historically was a
  privilege only lisp has had.
#+end_notes
#+ATTR_REVEAL: :frag roll-in
  Well now we have an ast to play with...
* Ok so what does all of this look like?
#+begin_notes
- Switch to editor
  - cool syntax highlighting
  - show off cool things like structural text objects,
  - debug mode/ playground :/
  - structural folding
  - lispy like editing
#+end_notes
* Whats next?
#+begin_notes
- road map
- Language support
- Tree edit
- maybe a utils package.
#+end_notes
* Some other cool resources
#+begin_notes
Ethans talk on tree edit
https://www.youtube.com/watch?v=FwDsuz0waIY
the strange loop talk on tree sitter
https://www.youtube.com/watch?v=Jes3bD6P0To
ublontons talk on emacs tree sitter
https://www.youtube.com/watch?v=ZwibVdNtFjs
#+end_notes
* Any Questions?
