#+title: Functional Programming, An interactive introduction

#+OPTIONS: toc:nil reveal_width:1200 reveal_height:1080 num:nil
#+REVEAL_ROOT: ../reveal.js
#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h3>%s</h3><h2>By %A %a</h2><h3><i></i></h3><p>Press s for speaker notes</p>
#+REVEAL_THEME: black
#+REVEAL_TRANS: slide

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage[top=1cm,left=3cm,right=3cm]{geometry}

* What is the norm?
#+begin_notes
The
#+end_notes
#+attr_reveal: :frag (roll-in)
 - Imperative code
 - Object oriented code
 - State just floating around
 - No control over side effects.
* How does functional programming differ from this?
#+attr_reveal: :frag (roll-in)
  - Code is made up of functions
  - Data is separate from the code that acts on it
  - Data cannot be mutated in place
  - Functions are values.
  - Side effects can *sometimes* be controlled
* Exercise: Opening an Editor
#+begin_notes
I don't want to teach you all a language, Thus for this  though learning a functional language
such as clojure, elixir, haskell with these constraints really helps solidify
these things and in the case of these languages allow you to leverage some
really cool things they do. *talk about what they do*
#+end_notes
#+attr_reveal: :frag (roll-in)
    - Clojure
    - Elixir
    - Haskell

* Data, Immutable and Separate
#+begin_notes
When we think about data, We think about performing actions on it and changing
it in place.
#+end_notes

#+begin_src python :results output
x = [1, 2, 3]
x.pop()
print(x)
#+end_src

: [1, 2]

#+reveal: split
#+begin_notes
In an immutable version we would use something like a tuple, when we do a
similar operation on a tuple we see how x is unaffected.
Python in this example we cannot add to or take an element out (though the
elements inside can be mutated)
#+end_notes

#+begin_src python :results output
x = (1,2,3)
y = x[:-1]
print(f"{x=}\n{y=}")
#+end_src

: x=(1, 2, 3)
: y=(1, 2)
** Exercise: programming with tuples
See if you can turn this code snippet from using a mutable list into using
immutable tuples. Note I don't expect your entire code to be immutable just yet,
Just that
#+begin_src python :results output
lst = []
for num in range(5):
    lst.append(num) # this operation mutates the list in place ðŸ˜±
    print(lst)
#+end_src

: [0]
: [0, 1]
: [0, 1, 2]
: [0, 1, 2, 3]
: [0, 1, 2, 3, 4]
#+reveal: split
#+begin_src python :results output
tup = ()
for num in range(5):
    tup = tup + (num,) # this operation creates a new tuple and reassigns it to the tup variable.
    print(tup)
#+end_src

: (0,)
: (0, 1)
: (0, 1, 2)
: (0, 1, 2, 3)
: (0, 1, 2, 3, 4)

* Functions, Pure and Side effect free
#+begin_notes
Now Hopefully this is already not terrible for you. Next we move onto the idea
of /pure/ functions. Pure functions do not do anything except take in an input and
return some kind of output. These make our functions deterministic
This means...
#+end_notes
#+attr_reveal: :frag (roll-in)
    - No Printing
    - No Mutating outside variables
    - No mutating variables you receive
    - Nothing except reading in information and constructing a new value.
** No Printing
#+begin_notes
YES no printing, taking input is actually worse as that removes the
deterministic guarantee, a rule of thumb is that either a function prints, or a
function returns a new value, not both.
#+end_notes

BAD
#+begin_src python
def add_print(x, y):
    sum = x + y
    print(f"{sum=}")
    return sum

add_print(2, 3)
#+end_src

#+reveal: split

GOOD
#+begin_src python
def add(x, y):
    return x + y

def print_val(val):
    print(f"{val=}")

print_val(add(2, 3))
#+end_src
** No Mutating Outside Variables
BAD
#+begin_src python :results output
names = []

def add_names(name):
    names.append(name)

add_names("Joe")
add_names("Kieran")

print(names)
#+end_src

: ['Joe', 'Kieran']

#+reveal: split

GOOD, kinda
#+begin_src python :results output
def add_name(lst, name):
    lst.append(name)
    return lst

lst = []
lst = add_name(lst, "Joe")
lst = add_name(lst, "Kieran")

print(lst)
#+end_src

: ['Joe', 'Kieran']
** No Mutating passed in variables
#+begin_notes
Lets go back to that last example. python actually does something called "pass
by reference", instead of passing by value. this means instead of creating a new
value we mutate the old on in place
#+end_notes
#+attr_reveal: :frag (roll-in)
    Pass by reference

#+attr_reveal: :frag (roll-in)
    #+begin_src python :results output
def add_name(lst, name):
    lst.append(name)

lst = []
add_name(lst, "Joe")
add_name(lst, "Kieran")

print(lst)
    #+end_src

#+attr_reveal: :frag (roll-in)
     ~['Joe', 'Kieran']~

#+reveal: split
#+begin_notes
The way we fix this is by making a copy of the list and then mutating that, or
using tuple operations...
#+end_notes

#+begin_src python :results output
def add_name(lst, name):
    new = lst.copy()
    new.append(name)
    return new

lst = []
new_lst = add_name(lst, "Joe")
new_new_lst = add_name(new_lst, "Kieran")

print(f"{lst=}\n{new_lst=}\n{new_new_lst=}")
#+end_src

: lst=[]
: new_lst=['Joe']
: new_new_lst=['Joe', 'Kieran']
** Exercise: Pure or not
We are going to play a game where we guess if certain functions from the std
library are pure, or if they do some kind of side effect.
#+attr_reveal: :frag (roll-in)
    - ~input()~
    - ~list.sort()~
    - ~sorted()~
    - ~next()~
    - ~enumerate()~
    - ~random.rand()~


* Functions, First class girlies (values)
#+begin_notes
Functions in many languages can be passed around like values.
#+end_notes

#+begin_src python :results output
def run_f(f):
    print("before f")
    f()
    print("after f")

def greeting():
    print("Hi GDSC!!")

run_f(greeting)
#+end_src

: before f
: Hi GDSC!!
: after f

#+reveal: split
#+begin_notes
When we inspect a function we can see a couple of interesting features.
Functions are objects, stored in memory and garbage collected, these objects
have a type. and these function objects have attributes on them. and we can add
our own.

We see here that functions are like any other value, just with some special
syntax to define them and use them.
#+end_notes
#+begin_src python :results output
def f():
    pass

f.my_sneaky_value = "hahahahah"
print(f)
print(type(f))
print(f.my_sneaky_value)
#+end_src

: <function f at 0x7f8e4f71a200>
: <class 'function'>
: hahahahah

** Unnamed functions
#+begin_notes
At the moment all the functions we have used have been named. but we can create
unnammed or anonymous functions. These are called lambdas in other languages.
These can be passed around like any other value and have the same types and all
that.
#+end_notes

#+begin_src python :results output
(
    lambda x: print(f"{x = }")
)(
    "a value called from outside"
)
#+end_src

#+RESULTS:
: x = 'a value called from outside'

#+reveal: split
#+begin_notes
Just to show that these are regular function values
#+end_notes

#+begin_src python :results output
f = lambda x: print(x)

f.my_sneaky_value = "hahahahah"
print(f)
print(type(f))
print(f.my_sneaky_value)
#+end_src

#+RESULTS:
: <function <lambda> at 0x7f88307da340>
: <class 'function'>
: hahahahah

** Why is this useful?
#+begin_notes
This is a question that people should have, especially when you see this for
the first time.
in essence when you want to allow for people to hook into the execution of a
kind of process without prescribing some kind of preset operation.

here in this example we essentially tell our web server whenever you hit the
root run this function and send back some html

Note in here I have not talked about returning functions or many function
operations that are quite important and useful
#+end_notes

#+attr_reveal: :frag (roll-in)
    #+begin_src rjsx
let app = require("express")()

app.get("/", function(request, result) {
  result.send("some html ig")
})
    #+end_src
** Exercise
#+begin_notes
Here I am going to introduce the activity that should take us to the end as we
go through the last couple of meaty slides.
We are going to implement a stack! Now the core of our stack is going to be a
tuple that we will make copies of. Our stack starts off as an empty tuple, a
stack for those who don't know is a first in first out data structure (use a
list to demo). we access an element using a pop operation, we add elements to it
using the push. we will also introduce a transform function that does not touch
the stack but takes off the top element and applys a function to it.

In this case what we will do is not focus on the push and pop and put a dummy
value into the stack.
#+end_notes

#+begin_src python :results output
def mk_stack():
    return (4,5,1)

print(mk_stack())
#+end_src

: (4, 5, 1)

#+reveal:split

your function would look something like this
#+begin_src python
def transform(stk, transform_function):
    pass
#+end_src
* Loops, Do not exist
#+begin_notes
Thats right, no more for or while loops. Why some of you may ask? well loops
have implicit mutation. Lets break down what loops do.
For loops are actually while loops that call the next method on an interator.
The next method mutates its argument.
Even with while loops the same values are updated in place. Reassigning to the
same place is still mutation so we can't have loops.
#+end_notes

#+begin_src python
lst = [1,2,3]

for elem in lst:
    print(elem)
# is mostly equal too
iterator = iter(lst)
while True:
   try:
       elem = next(iterator)
   except StopIteration:
       break
   # body
   print(elem)

#+end_src

** Recursion to the rescue!!
#+begin_notes
Instead of using dirty, disgusting, loops which mutate there arguments, we can
use functions instead! functions which call themselves!
Because arguments are copied between function invoations we don't end up
mutating anything,
#+end_notes
#+begin_src python :results output
def print_list(lst):
    if len(lst) == 0:
        return
    else:
        elem, *tail = lst
        print(f"{elem = }")
        print_list(tail)

lst = ["Mark", "Kieran", "Nikhil"]
print_list(lst)
print(lst)
#+end_src

#+RESULTS:
: elem = 'Mark'
: elem = 'Kieran'
: elem = 'Nikhil'
: ['Mark', 'Kieran', 'Nikhil']

** Exercise
#+begin_notes
Our stack is looking less like a stack. but in any case I will ask yall to write
a function that takes in a function and recursively goes down the stack
transforming each element using the function
#+end_notes

#+begin_src python :results output
def transform_stk(stk, transform_fn):
    pass
#+end_src
* Lists, A lot of work done on them.
#+begin_notes
I want to think about everything we have done here. a lot of cases we are doing
the same thing, recursing through lists manually not good and repeated code
should be setting off alarm bells for all yall, Python actually provides some
very useful operations
#+end_notes
** Map transform an entire list using a function
#+begin_src python
return list(map(lambda elem_from_list: 1 + elem_from_list, [1,2,3,4]))
#+end_src

#+RESULTS:
| 2 | 3 | 4 | 5 |

** filter, remove elements that don't meet some kind of condition
#+begin_src python
return list(filter(lambda elem: elem % 2 == 0, (1,2,3,4,)))
#+end_src

#+RESULTS:
| 2 | 4 |

** reduce, take a list and sum it up in a neat way.
#+begin_notes
reduce is the most powerful operation of these three, you can use reduce to
actually implement map and filter. Reduce gives you two arguments, an
accumulated value, and the current value. the return value is the new
accumulator.
#+end_notes

We can do things like
#+reveal: split
sum up a list
#+begin_src python
from functools import reduce
return reduce(lambda acc, elem: acc + elem, range(10), 0)
#+end_src

: 45

#+reveal: split
find the maximum element...
#+begin_src python
from functools import reduce
return reduce(lambda max_elem, curr: max(max_elem, curr), [4, 5, 3, 12, 1, 2, 11], 0)
#+end_src

: 12

#+reveal: split
apply a transformation to each element...
#+begin_src python :results output
from functools import reduce
print(reduce(lambda list_acc, curr: list_acc + [str(curr)], [4, 5, 4,  3], []))
#+end_src

#+RESULTS:
: ['4', '5', '4', '3']
so on...
** Exercize
Can we use reduce to push many elements onto a stack? at this point we should
also implement pop and push?

* What about side effects????!!>!>>!>1.1.1.1.1>>>>>?????
* What about errors?????!>?>!>!>!>!>!>
* Any Questions
